/*
 * This file is generated by jOOQ.
 */
package com.onedata.jooq.pokemon.db.tables;


import com.onedata.jooq.pokemon.db.Keys;
import com.onedata.jooq.pokemon.db.Public;
import com.onedata.jooq.pokemon.db.tables.records.PokemonRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Pokemon extends TableImpl<PokemonRecord> {

    /**
     * The reference instance of <code>public.pokemon</code>
     */
    public static final Pokemon POKEMON = new Pokemon();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>public.pokemon.id</code>.
     */
    public final TableField<PokemonRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");
    /**
     * The column <code>public.pokemon.name</code>.
     */
    public final TableField<PokemonRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");
    /**
     * The column <code>public.pokemon.type</code>.
     */
    public final TableField<PokemonRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(50).nullable(false), this, "");
    /**
     * The column <code>public.pokemon.hp</code>.
     */
    public final TableField<PokemonRecord, Integer> HP = createField(DSL.name("hp"), SQLDataType.INTEGER.nullable(false), this, "");

    private Pokemon(Name alias, Table<PokemonRecord> aliased) {
        this(alias, aliased, null);
    }

    private Pokemon(Name alias, Table<PokemonRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.pokemon</code> table reference
     */
    public Pokemon(String alias) {
        this(DSL.name(alias), POKEMON);
    }

    /**
     * Create an aliased <code>public.pokemon</code> table reference
     */
    public Pokemon(Name alias) {
        this(alias, POKEMON);
    }

    /**
     * Create a <code>public.pokemon</code> table reference
     */
    public Pokemon() {
        this(DSL.name("pokemon"), null);
    }

    public <O extends Record> Pokemon(Table<O> child, ForeignKey<O, PokemonRecord> key) {
        super(child, key, POKEMON);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PokemonRecord> getRecordType() {
        return PokemonRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<PokemonRecord, Integer> getIdentity() {
        return (Identity<PokemonRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PokemonRecord> getPrimaryKey() {
        return Keys.POKEMON_PKEY;
    }

    @Override
    public Pokemon as(String alias) {
        return new Pokemon(DSL.name(alias), this);
    }

    @Override
    public Pokemon as(Name alias) {
        return new Pokemon(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Pokemon rename(String name) {
        return new Pokemon(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pokemon rename(Name name) {
        return new Pokemon(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
